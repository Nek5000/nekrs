void codedFixedValueVelocity(bcData *bc)
{
  bc->u = 0.0;
  bc->v = 0.0;
  bc->w = 0.0;
}
void codedFixedValueScalar(bcData *bc)
{
  bc->s = 0;
  if (bc->scalarId == 0) {
    bc->s = bc->usrwrk[bc->idM];
  }
}

@kernel void ktauBuoForce(const dlong N,
                          const dlong offset,
                          @ restrict const dfloat *T,
                          @ restrict dfloat *FU)
{
  for (dlong n = 0; n < N; ++n; @tile(256, @outer, @inner)) {
    if(n < N) {
      FU[n + 0 * offset] = 0.0;
      FU[n + 1 * offset] = T[n];
      FU[n + 2 * offset] = 0.0;
    }
  }
}

@kernel void scalarScaledAdd(const dlong N,
                             const dfloat a,
                             const dfloat b,
                             @ restrict const dfloat *X,
                             @ restrict dfloat *Y)
{
  for (dlong n = 0; n < N; ++n; @tile(256, @outer, @inner)) {
    if (n < N) {
      Y[n] = a + b * X[n];
    }
  }
}
