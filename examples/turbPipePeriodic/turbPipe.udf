static dfloat Re_tau;
static dfloat zLength;
static dfloat dt0;

#include "ci.inc"

#ifdef __okl__

#include "turbPipe.oudf"

#endif

void userf(double time)
{
  auto mesh = nrs->meshV;
  dfloat mue, rho;
  platform->options.getArgs("VISCOSITY", mue);
  platform->options.getArgs("DENSITY", rho);
  const dfloat RE_B = rho / mue;
  const dfloat DPDZ = 4 * (2 * Re_tau / RE_B) * (2 * Re_tau / RE_B);

  auto o_FUz = nrs->o_NLT + 2 * nrs->fieldOffset;
  platform->linAlg->fill(mesh->Nlocal, DPDZ, o_FUz);
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "re_tau", Re_tau);
  platform->par->extract("casedata", "zlength", zLength);

  options.getArgs("CI-MODE", ciMode);
  if (ciMode) {
    ciSetup(comm, options);
  }

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    *nek::ptr<double>("zlen") = zLength;
  }

  platform->options.getArgs("DT", dt0);
}

void UDF_Setup()
{
  if (platform->options.compareArgs("CONSTANT FLOW RATE", "FALSE")) {
    // assign function pointer to drive flow by constant mean pressure gradient
    nrs->userVelocitySource = &userf;
  }
}

void UDF_ExecuteStep(double time, int tstep)
{
  if (tstep < 5) {
    platform->options.setArgs("DT", to_string_f(0.25 * dt0));
  } else {
    platform->options.setArgs("DT", to_string_f(dt0));
  }

  if (nrs->lastStep) {
    if (ciMode) {
      ciTestErrors(nrs, time, tstep);
    }
  }
}
