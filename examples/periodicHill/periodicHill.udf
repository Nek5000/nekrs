#include "RANSktau.hpp"

static dfloat rho, mueLam;

#ifdef __okl__

#include "periodicHill.oudf"

#endif

void userq(double time)
{
  RANSktau::updateSourceTerms();
}

void uservp(double time)
{
  auto mesh = nrs->meshV;
  auto cds = nrs->cds;

  RANSktau::updateProperties();

  dfloat conductivity;
  platform->options.getArgs("SCALAR00 DIFFUSIVITY", conductivity);
  const dfloat Pr_t = 0.7;
  auto o_mue_t = RANSktau::o_mue_t();
  auto o_temp_mue = cds->o_diff + 0 * cds->fieldOffset[0];
  scalarScaledAdd(mesh->Nlocal, conductivity, 1 / Pr_t, o_mue_t, o_temp_mue);
}

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{
#if 0
  {
    auto props = kernelInfo;
    props.define("p_sigma_k") = 0.6;
    RANSktau::buildKernel(props);
  }
#endif
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
}

void UDF_Setup()
{
  nrs->userProperties = &uservp;
  nrs->userScalarSource = &userq;

  const int scalarFieldStart = 1;
  platform->options.getArgs("VISCOSITY", mueLam);
  platform->options.getArgs("DENSITY", rho);

  RANSktau::setup(mueLam, rho, scalarFieldStart);
}

void UDF_ExecuteStep(double time, int tstep)
{
}
