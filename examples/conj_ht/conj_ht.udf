#include "ci.inc"

static int updateProperties = 1;

#ifdef __okl__

#include "conj_ht.oudf"

#endif

void userq(double time)
{
  auto cds = nrs->cds;
  auto mesh = cds->mesh[0];
  const dfloat qvolFluid = 0.0;
  const dfloat qvolSolid = 1.0;
  cFill(mesh->Nelements, qvolFluid, qvolSolid, mesh->o_elementInfo, cds->o_NLT);
}

void uservp(double time)
{
  auto cds = nrs->cds;
  auto mesh = nrs->mesh;

  if (updateProperties) {
    if (platform->comm.mpiRank == 0) {
      std::cout << "updating properties"
                << "\n";
    }
    const dfloat rho = 1.0;
    const dfloat mue = 1 / 1000.0;
    const dfloat rhoCpFluid = rho * 1.0;
    const dfloat conFluid = mue;
    const dfloat rhoCpSolid = rhoCpFluid * 0.1;
    const dfloat conSolid = 10 * conFluid;

    // velocity
    const auto o_mue = nrs->o_prop.slice(0 * nrs->fieldOffset);
    const auto o_rho = nrs->o_prop.slice(1 * nrs->fieldOffset);
    cFill(mesh->Nelements, mue, 0, mesh->o_elementInfo, o_mue);
    cFill(mesh->Nelements, rho, 0, mesh->o_elementInfo, o_rho);
    // temperature
    const auto o_con = cds->o_prop.slice(0 * cds->fieldOffset[0]);
    const auto o_rhoCp = cds->o_prop.slice(1 * cds->fieldOffset[0]);
    cFill(cds->mesh[0]->Nelements, conFluid, conSolid, cds->mesh[0]->o_elementInfo, o_con);
    cFill(cds->mesh[0]->Nelements, rhoCpFluid, rhoCpSolid, cds->mesh[0]->o_elementInfo, o_rhoCp);
    updateProperties = 0;
  }
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) {
    ciSetup(comm, options);
  }
}

void UDF_Setup()
{
  nrs->userScalarSource = &userq;
  nrs->userProperties = &uservp;


  if (platform->options.getArgs("RESTART FILE NAME").empty()) {
    {
      auto mesh = nrs->mesh;
      auto [x, y, z] = mesh->xyzHost();
      std::vector<dfloat> U(mesh->dim * nrs->fieldOffset, 0.0);
      for(int n = 0; n < mesh->Nlocal; n++) {
        U[n + 0 * nrs->fieldOffset] = 4.0 * y[n] * (1.0 - y[n]);
      }
      nrs->o_U.copyFrom(U.data(), U.size());
    }

    {
      auto mesh = nrs->cds->mesh[0];
      std::vector<dfloat> T(mesh->Nlocal);
      for(int n = 0; n < mesh->Nlocal; n++) {
        T[n] = 0; 
      }
      nrs->cds->o_S.copyFrom(T.data(), T.size());
    }
  }
}

void UDF_ExecuteStep(double time, int tstep)
{
  if (nrs->checkpointStep) {
    nrs->copyToNek(time, tstep);
    nek::userchk();
  }
  if (ciMode) {
    ciTestErrors(nrs, time, tstep);
  }
}
