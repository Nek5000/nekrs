@kernel void extrapolateBoundary(const dlong npt,
  const dlong offset,
  const dlong Nfields,
  const dlong order,
  const dlong predictor,
  const dfloat tn,
  @restrict const dfloat * time,
  @restrict const dfloat * S,
  @restrict dfloat * Se)
{
  for(int n = 0; n < npt; ++n; @tile(p_blockSize, @outer, @inner)){

    dfloat prevTimes[4] = {time[n + 0 * offset], time[n + 1 * offset], time[n + 2 * offset], time[n + 3 * offset]};
    dfloat coeff[4] = {0.0, 0.0, 0.0, 0.0};

    dlong extOrder = predictor ? order - 1 : order;
    timeInterpWeights(tn, prevTimes, extOrder, coeff);

    for(int field = 0; field < Nfields; ++field){
      dfloat se = 0.0;
      for(int s = 0; s <= extOrder; ++s){
        se += coeff[s] * S[n + field * offset + s * offset * Nfields];
      }
      Se[n + field * offset] = se;
    }
  }
}