@kernel void sumMakef(const dlong N,
                      const int isVelocity,
                      @ restrict const dfloat *massMatrix,
                      const dfloat idt,
                      @ restrict const dfloat *coeffEXT,
                      @ restrict const dfloat *coeffBDF,
                      const dlong fieldOffset,
                      const dlong fieldSumOffset,
                      const dlong fieldOffsetJW,
                      @ restrict const dfloat *RHO,
                      @ restrict const dfloat *U,
                      @ restrict const dfloat *NU,
                      @ restrict const dfloat *FU,
                      @ restrict dfloat *BF)
{
  // BF := -1/dt * v^* = sum{beta_j * nlt^n-j} + 1/dt * sum{alpha_j * v^n-j}
  if (isVelocity) {

    for (dlong id = 0; id < N; ++id; @tile(p_blockSize, @outer, @inner)) {
      dfloat JW = massMatrix[id];

      dfloat bdfx = 0;
      dfloat bdfy = 0;
      dfloat bdfz = 0;
#if p_SUBCYCLING
      bdfx += NU[id + 0 * fieldOffset];
      bdfy += NU[id + 1 * fieldOffset];
      bdfz += NU[id + 2 * fieldOffset];
#else

#pragma unroll p_nBDF
      for (int s = 0; s < p_nBDF; s++) {
#if p_MovingMesh
        JW = massMatrix[id + s * fieldOffsetJW];
#endif
        bdfx += coeffBDF[s] * JW * U[id + 0 * fieldOffset + s * fieldSumOffset];
        bdfy += coeffBDF[s] * JW * U[id + 1 * fieldOffset + s * fieldSumOffset];
        bdfz += coeffBDF[s] * JW * U[id + 2 * fieldOffset + s * fieldSumOffset];
     }
#endif
      dfloat nltx = 0;
      dfloat nlty = 0;
      dfloat nltz = 0;
#pragma unroll p_nEXT
      for (int s = 0; s < p_nEXT; s++) {
#if p_MovingMesh
        JW = massMatrix[id + s * fieldOffsetJW];
#endif
        nltx += JW * coeffEXT[s] * FU[id + 0 * fieldOffset + s * fieldSumOffset];
        nlty += JW * coeffEXT[s] * FU[id + 1 * fieldOffset + s * fieldSumOffset];
        nltz += JW * coeffEXT[s] * FU[id + 2 * fieldOffset + s * fieldSumOffset];
      }

      BF[id + 0 * fieldOffset] = nltx + idt * bdfx;
      BF[id + 1 * fieldOffset] = nlty + idt * bdfy;
      BF[id + 2 * fieldOffset] = nltz + idt * bdfz;
    }

  } else {

    // BF := -rho/dt * v^* = sum{beta_j * nlt^n-j} + rho/dt * sum{alpha_j * v^n-j}
    for (dlong id = 0; id < N; ++id; @tile(p_blockSize, @outer, @inner)) {
      dfloat JW = massMatrix[id];

      dfloat bdfx = 0;
#if p_SUBCYCLING
      bdfx += NU[id];
#else

#pragma unroll p_nBDF
      for (int s = 0; s < p_nBDF; s++) {
#if p_MovingMesh
        JW = massMatrix[id + s * fieldOffsetJW];
#endif
        bdfx += coeffBDF[s] * JW * U[id + fieldOffset + s * fieldSumOffset];
     }
#endif

      dfloat nltx = 0;
#pragma unroll p_nEXT
      for (int s = 0; s < p_nEXT; s++) {
#if p_MovingMesh
        JW = massMatrix[id + s * fieldOffsetJW];
#endif
        // FU already multiplied by rho
        nltx += JW * coeffEXT[s] * FU[id + fieldOffset + s * fieldSumOffset];
      }

      const dfloat rho = RHO[id + fieldOffset];
      BF[id + fieldOffset] = nltx + rho * idt * bdfx;
    }

  }
}
