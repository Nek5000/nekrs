#define surfaceTerms(sk, face, m, i, j)                                                                      \
  {                                                                                                          \
    const dlong idM = vmapM[sk];                                                                             \
    s_ua[m][j][i] = sgeo[sk * p_Nsgeo + p_WSJID] * U[idM];                                                   \
  }

@kernel void surfaceAreaMultiplyHex3D(const dlong Nelements,
                                      const int nbID,
                                      const int *bID,
                                      @ restrict const dfloat *sgeo,
                                      @ restrict const dlong *vmapM,
                                      @ restrict const int *EToBM,
                                      @ restrict const dfloat *U,
                                      @ restrict dfloat *UA)
{
  for (dlong e = 0; e < Nelements; e++; @outer(0)) {
    @shared dfloat s_ua[2][p_Nq][p_Nq];
    @exclusive dfloat r_sum[p_Nq];

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; ++k) r_sum[k] = 0.;
      }
    }

    // loop over all request boundary patches
    for (int ibID = 0; ibID < nbID; ibID++) {

    // face 0 & 5
    if (bID[ibID] == EToBM[0 + p_Nfaces * e] || bID[ibID] == EToBM[5 + p_Nfaces * e]) {
      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong sk0 = e * p_Nfp * p_Nfaces + 0 * p_Nfp + i + j * p_Nq;
          const dlong sk5 = e * p_Nfp * p_Nfaces + 5 * p_Nfp + i + j * p_Nq;
 
          surfaceTerms(sk0, 0, 0, i, j);
          surfaceTerms(sk5, 5, 1, i, j);
        }
      }
 
      @barrier();
 
      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          // face 0
          r_sum[0] += s_ua[0][j][i];
 
          // face 5
          r_sum[p_Nq - 1] += s_ua[1][j][i];
        }
      }
    }

    @barrier();

    // face 1 & 3
    if (bID[ibID] == EToBM[1 + p_Nfaces * e] || bID[ibID] == EToBM[3 + p_Nfaces * e]) {
      for (int k = 0; k < p_Nq; ++k; @inner(1))
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong sk1 = e * p_Nfp * p_Nfaces + 1 * p_Nfp + i + k * p_Nq;
          const dlong sk3 = e * p_Nfp * p_Nfaces + 3 * p_Nfp + i + k * p_Nq;
 
          surfaceTerms(sk1, 1, 0, i, k);
          surfaceTerms(sk3, 3, 1, i, k);
        }
 
      @barrier();
 
      // face 1 & 3
      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          if (j == 0) { // face 1
#pragma unroll p_Nq
            for (int k = 0; k < p_Nq; k++) r_sum[k] += s_ua[0][k][i];
          }
          if (j == p_Nq - 1) { // face 3
#pragma unroll p_Nq
            for (int k = 0; k < p_Nq; k++) r_sum[k] += s_ua[1][k][i];
          }
        }
      }
    }

    @barrier();

    // face 2 & 4
    if (bID[ibID] == EToBM[2 + p_Nfaces * e] || bID[ibID] == EToBM[4 + p_Nfaces * e]) {
      for (int k = 0; k < p_Nq; ++k; @inner(1))
        for (int j = 0; j < p_Nq; ++j; @inner(0)) {
          const dlong sk2 = e * p_Nfp * p_Nfaces + 2 * p_Nfp + j + k * p_Nq;
          const dlong sk4 = e * p_Nfp * p_Nfaces + 4 * p_Nfp + j + k * p_Nq;
 
          surfaceTerms(sk2, 2, 0, j, k);
          surfaceTerms(sk4, 4, 1, j, k);
        }
 
      @barrier();
 
      // face 2 & 4
      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          if (i == p_Nq - 1) { // face 2
#pragma unroll p_Nq
            for (int k = 0; k < p_Nq; k++) r_sum[k] += s_ua[0][k][j];
          }
          if (i == 0) { // face 4
#pragma unroll p_Nq
            for (int k = 0; k < p_Nq; k++)  r_sum[k] += s_ua[1][k][j];
          }
        }
      }
    }

    @barrier();

    } // boundary patch loop loop 

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; ++k) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          UA[id] += r_sum[k];
        }
      }
    }
  }
}

#undef surfaceTerms
