/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#define p_NelPerBlock 4
#define p_dNfields 1

#define mymax(a, b) (((a) > (b)) ? (a) : (b))
#define mymin(a, b) (((a) < (b)) ? (a) : (b))

@kernel void relativeMassAveragedMode(const dlong Nelements,
                                      const dfloat atol,
                                      @ restrict const int *ModMap,
                                      @ restrict const dfloat *InvVT,
                                      @ restrict const dfloat *LSF,
                                      @ restrict const dfloat *BLD,
                                      const dlong fieldOffsetScan,
                                      @ restrict const dfloat *Qhat,
                                      @ restrict dfloat *logSk)
{
  for (dlong eo = 0; eo < Nelements; eo += p_NelPerBlock; @outer(0)) {

    @shared dfloat s_Qhat[p_NelPerBlock][p_dNfields][p_Np];
    @shared dfloat s_LogMod[p_NelPerBlock][p_dNfields][p_Nq];

    @shared int s_ModMap[p_Np];
    @shared dfloat s_LSF[p_Nq];
    @shared dfloat s_BLD[p_Nq];

    // prefetch global into shared variables 
    for (int es = 0; es < p_NelPerBlock; ++es; @inner(1)) {
      for (int n = 0; n < p_Nq; n++; @inner(0)) {
        if (es == 0) {
          s_LSF[n] = LSF[n];
          s_BLD[n] = BLD[n];
        }

        int m = n + es * p_Np;
        while (m < p_Np * p_NelPerBlock && eo * p_Np + m < Nelements * p_Np) {
          const dlong id = m + eo * p_Np * p_dNfields;
          for (int fld = 0; fld < p_dNfields; fld++) {
            s_Qhat[0][fld][m] = Qhat[id + fld * p_Np + fieldOffsetScan];
          }
          m += p_Nq;
        }

        m = n; // reset counter
        while (m < p_Np) {
          s_ModMap[m] = ModMap[m];
          m += p_Nq;
        }
      }
    }

    @barrier();

    // skyline pessimization: get 1D modes
    for (int es = 0; es < p_NelPerBlock; ++es; @inner(1)) {
      for (int n = 0; n < p_Nq; n++; @inner(0)) {
        dfloat modsum[p_dNfields];
        for (int fld = 0; fld < p_dNfields; fld++) {
          modsum[fld] = 0;
        }

        for (int i = 0; i < n + 1; i++) {
          const int nmods = n * n * n + i;
          const int m = s_ModMap[nmods];
          for (int fld = 0; fld < p_dNfields; fld++) {
            modsum[fld] += s_Qhat[es][fld][m] * s_Qhat[es][fld][m];
          }
        }

       const dfloat L2normSqr = atol * atol;
       for (int fld = 0; fld < p_dNfields; fld++) {
          const float res = modsum[fld] + s_BLD[n] * L2normSqr;
#if defined(XeHPC)
          s_LogMod[es][fld][n] = 0.5f * log10(res);
#else
          s_LogMod[es][fld][n] = 0.5f * log10f(res);
#endif
        }
      }
    }

    @barrier();

    for (int es = 0; es < p_NelPerBlock; ++es; @inner(1)) {
      for (int n = 0; n < p_Nq; n++; @inner(0)) {
        const dlong e = eo + es;
        if (e < Nelements) {
          if (n == 0) {
            for (int fld = 0; fld < p_dNfields; fld++) {
              // accumulate in least squares fit
              dfloat runningMax = mymax(s_LogMod[es][fld][p_Nq - 1], s_LogMod[es][fld][p_Nq - 2]);
              dfloat coeff = runningMax * s_LSF[p_Nq - 2];
              for (int j = p_Nq - 2; j > 0; --j) {
                runningMax = mymax(runningMax, s_LogMod[es][fld][j]);
                coeff += s_LSF[j - 1] * runningMax;
              }

              logSk[e * p_dNfields + fld] = fabs(coeff);
              //printf("logSk: %g %d\n", coeff, e);
            }
          }
        }
      }
    }
  }
}
